services:
  bot:
    container_name: bot-trading-crypto
    build: .
    restart: always
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - TOKEN=${TOKEN}
      - CHANNEL=${CHANNEL}
      - AMOUNT_TO_SPEND=${AMOUNT_TO_SPEND}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET}
    networks:
      - app-network
    depends_on:
      redis:
        condition: service_healthy
    command: ["npm", "start"]

  redis:
    image: redis:6.2
    container_name: redis-trading-crypto
    volumes:
      - redis-data:/data
    command: ["redis-server", "--appendonly", "yes"]
    restart: always
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"
  
  database:
    image: postgres:16
    container_name: database-trading-crypto
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db/database.sql:/docker-entrypoint-initdb.d/database.sql
    restart: always
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"
  
  frontend:
    container_name: frontend-trading-crypto
    build:
      context: ./frontend
    restart: always
    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      - bot
    environment:
      NEXT_PUBLIC_API_URL:  ${NEXT_PUBLIC_API_URL}
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  
  backend:
    container_name: backend-trading-crypto
    build:
      context: ./backend
    restart: always
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  
  nginx:
    container_name: nginx-trading-crypto
    image: nginx:stable
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - certs:/etc/nginx/certs:ro
    depends_on:
      - frontend
      - bot
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - app-network
    depends_on:
      - backend
    restart: always
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "512M"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"  # Port Grafana
    depends_on:
      - prometheus
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - app-network
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    restart: always
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
    networks:
      - app-network

  redis-exporter:
    image: oliver006/redis_exporter
    ports:
      - "9121:9121"
    networks:
      - app-network
    environment:
      - REDIS_ADDR=${REDIS_HOST}:${REDIS_PORT}

  node-exporter:
    image: prom/node-exporter
    ports:
      - "9100:9100"
    networks:
      - app-network


volumes:
  redis-data:
  grafana-data:


networks:
  app-network:
    driver: bridge
